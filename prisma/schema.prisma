// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique()
  password      String
  image         String?
  role          UserRole     @default(USER)
  emailVerified Boolean?     @map("email_verified")
  createdAt     DateTime?
  updatedAt     DateTime?    @updatedAt
  accounts      Account[]
  sessions      Session[]
  enrollment    enrollment[]
  progress      progress[]

  completedCourses completedCourses[]
}

model completedCourses {
  id String @id @default(uuid())

  courseId   String
  percentage String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model course {
  id             String       @id @default(uuid())
  title          String       @unique
  description    String
  price          Int
  questionsCount Int          @map("questions_count")
  question       question[]
  enrollment     enrollment[]
  progress       progress[]
}

model question {
  id            String    @id @default(uuid())
  title         String    @unique
  correctAnswer String    @map("correct_answer")
  answers       answers[]

  course   course     @relation(fields: [courseId], references: [id])
  courseId String     @map("course_id")
  progress progress[]
}

model answers {
  id         String   @id @default(uuid())
  title      String
  question   question @relation(fields: [questionId], references: [id])
  questionId String   @map("question_id")
}

model progress {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     course   @relation(fields: [courseId], references: [id])
  courseId   String
  question   question @relation(fields: [questionId], references: [id])
  questionId String
  createdAt  DateTime @default(now())
}

model enrollment {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  course   course @relation(fields: [courseId], references: [id])
  courseId String @map("course_id")
}
