// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique()
  password       String
  image          String?
  role           UserRole         @default(USER)
  emailVerified  Boolean?         @map("email_verified")
  createdAt      DateTime?
  updatedAt      DateTime?        @updatedAt
  accounts       Account[]
  sessions       Session[]
  enrollment     enrollment[]
  transaction    transaction[]
  CourseProgress CourseProgress[]
}

model course {
  id             String           @id @default(uuid())
  title          String           @unique
  description    String
  price          Int
  questionsCount Int              @map("questions_count")
  question       question[]
  enrollment     enrollment[]
  transaction    transaction[]
  CourseProgress CourseProgress[]
}

model question {
  id            String    @id @default(uuid())
  title         String    @unique
  correctAnswer String    @map("correct_answer")
  answers       answers[]

  course   course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @map("course_id")
}

model answers {
  id         String   @id @default(uuid())
  title      String
  question   question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @map("question_id")
}

model enrollment {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  course   course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @map("course_id")
}

model CourseProgress {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  course   course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @map("course_id")

  completedQuestions String[] @default([])
  totalQuestions     Int

  progress Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([courseId, userId])
}

enum Status {
  CREATED
  PAID
  FAILED
}

model transaction {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  course   course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @map("course_id")

  amount          String
  status          Status @default(CREATED)
  transactionCode String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
